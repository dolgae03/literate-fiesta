# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import earth_pb2 as earth__pb2


class SatracStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendTrajectoryInfo = channel.unary_unary(
                '/Satrac/SendTrajectoryInfo',
                request_serializer=earth__pb2.SatTrajectoryInfo.SerializeToString,
                response_deserializer=earth__pb2.Response_code.FromString,
                )
        self.SendAttitudeInfo = channel.unary_unary(
                '/Satrac/SendAttitudeInfo',
                request_serializer=earth__pb2.SatAttitudeInfo.SerializeToString,
                response_deserializer=earth__pb2.Response_code.FromString,
                )
        self.SendGroundStationInfo = channel.unary_unary(
                '/Satrac/SendGroundStationInfo',
                request_serializer=earth__pb2.GroundStationInfo.SerializeToString,
                response_deserializer=earth__pb2.Response_code.FromString,
                )
        self.SendSatVecInfo = channel.stream_unary(
                '/Satrac/SendSatVecInfo',
                request_serializer=earth__pb2.SatVectorInfo.SerializeToString,
                response_deserializer=earth__pb2.Response_code.FromString,
                )
        self.ChangeUrl = channel.unary_unary(
                '/Satrac/ChangeUrl',
                request_serializer=earth__pb2.Url.SerializeToString,
                response_deserializer=earth__pb2.Response_code.FromString,
                )
        self.StartDraw = channel.unary_unary(
                '/Satrac/StartDraw',
                request_serializer=earth__pb2.Empty.SerializeToString,
                response_deserializer=earth__pb2.Response_code.FromString,
                )


class SatracServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendTrajectoryInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendAttitudeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendGroundStationInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSatVecInfo(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartDraw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SatracServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendTrajectoryInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTrajectoryInfo,
                    request_deserializer=earth__pb2.SatTrajectoryInfo.FromString,
                    response_serializer=earth__pb2.Response_code.SerializeToString,
            ),
            'SendAttitudeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAttitudeInfo,
                    request_deserializer=earth__pb2.SatAttitudeInfo.FromString,
                    response_serializer=earth__pb2.Response_code.SerializeToString,
            ),
            'SendGroundStationInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SendGroundStationInfo,
                    request_deserializer=earth__pb2.GroundStationInfo.FromString,
                    response_serializer=earth__pb2.Response_code.SerializeToString,
            ),
            'SendSatVecInfo': grpc.stream_unary_rpc_method_handler(
                    servicer.SendSatVecInfo,
                    request_deserializer=earth__pb2.SatVectorInfo.FromString,
                    response_serializer=earth__pb2.Response_code.SerializeToString,
            ),
            'ChangeUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeUrl,
                    request_deserializer=earth__pb2.Url.FromString,
                    response_serializer=earth__pb2.Response_code.SerializeToString,
            ),
            'StartDraw': grpc.unary_unary_rpc_method_handler(
                    servicer.StartDraw,
                    request_deserializer=earth__pb2.Empty.FromString,
                    response_serializer=earth__pb2.Response_code.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Satrac', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Satrac(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendTrajectoryInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Satrac/SendTrajectoryInfo',
            earth__pb2.SatTrajectoryInfo.SerializeToString,
            earth__pb2.Response_code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendAttitudeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Satrac/SendAttitudeInfo',
            earth__pb2.SatAttitudeInfo.SerializeToString,
            earth__pb2.Response_code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendGroundStationInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Satrac/SendGroundStationInfo',
            earth__pb2.GroundStationInfo.SerializeToString,
            earth__pb2.Response_code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendSatVecInfo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Satrac/SendSatVecInfo',
            earth__pb2.SatVectorInfo.SerializeToString,
            earth__pb2.Response_code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Satrac/ChangeUrl',
            earth__pb2.Url.SerializeToString,
            earth__pb2.Response_code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartDraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Satrac/StartDraw',
            earth__pb2.Empty.SerializeToString,
            earth__pb2.Response_code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
