# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import earth_pb2 as earth__pb2


class SatracStub(object):
    """python -m grpc_tools.protoc -I . --python_out ./library --grpc_python_out ./library ./earth.proto

    서비스 이름은 SatTrac로 합시다.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetProgramMode = channel.unary_unary(
                '/Satrac/SetProgramMode',
                request_serializer=earth__pb2.Mode.SerializeToString,
                response_deserializer=earth__pb2.Response_code.FromString,
                )
        self.SendSatInformation = channel.unary_unary(
                '/Satrac/SendSatInformation',
                request_serializer=earth__pb2.SatInfo.SerializeToString,
                response_deserializer=earth__pb2.Response_code.FromString,
                )
        self.SendTLEInformation = channel.unary_unary(
                '/Satrac/SendTLEInformation',
                request_serializer=earth__pb2.TLEInfo.SerializeToString,
                response_deserializer=earth__pb2.Response_code.FromString,
                )
        self.SendTest = channel.unary_unary(
                '/Satrac/SendTest',
                request_serializer=earth__pb2.Test.SerializeToString,
                response_deserializer=earth__pb2.Response_code.FromString,
                )


class SatracServicer(object):
    """python -m grpc_tools.protoc -I . --python_out ./library --grpc_python_out ./library ./earth.proto

    서비스 이름은 SatTrac로 합시다.
    """

    def SetProgramMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSatInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTLEInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SatracServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetProgramMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetProgramMode,
                    request_deserializer=earth__pb2.Mode.FromString,
                    response_serializer=earth__pb2.Response_code.SerializeToString,
            ),
            'SendSatInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSatInformation,
                    request_deserializer=earth__pb2.SatInfo.FromString,
                    response_serializer=earth__pb2.Response_code.SerializeToString,
            ),
            'SendTLEInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTLEInformation,
                    request_deserializer=earth__pb2.TLEInfo.FromString,
                    response_serializer=earth__pb2.Response_code.SerializeToString,
            ),
            'SendTest': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTest,
                    request_deserializer=earth__pb2.Test.FromString,
                    response_serializer=earth__pb2.Response_code.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Satrac', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Satrac(object):
    """python -m grpc_tools.protoc -I . --python_out ./library --grpc_python_out ./library ./earth.proto

    서비스 이름은 SatTrac로 합시다.
    """

    @staticmethod
    def SetProgramMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Satrac/SetProgramMode',
            earth__pb2.Mode.SerializeToString,
            earth__pb2.Response_code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendSatInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Satrac/SendSatInformation',
            earth__pb2.SatInfo.SerializeToString,
            earth__pb2.Response_code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTLEInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Satrac/SendTLEInformation',
            earth__pb2.TLEInfo.SerializeToString,
            earth__pb2.Response_code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Satrac/SendTest',
            earth__pb2.Test.SerializeToString,
            earth__pb2.Response_code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
